( () => {
	"use strict";
	var t = function t( e, r ) {
		if ( e === r ) return !0;
		if ( e && r && "object" == typeof e && "object" == typeof r ) {
			if ( e.constructor !== r.constructor ) return !1;
			var i, s, n;
			if ( Array.isArray( e ) ) {
				if ( ( i = e.length ) != r.length ) return !1;
				for ( s = i; 0 != s--; )
					if ( !t( e[ s ], r[ s ] ) ) return !1;
				return !0
			}
			if ( e.constructor === RegExp ) return e.source === r.source && e.flags === r.flags;
			if ( e.valueOf !== Object.prototype.valueOf ) return e.valueOf() === r.valueOf();
			if ( e.toString !== Object.prototype.toString ) return e.toString() === r.toString();
			if ( ( i = ( n = Object.keys( e ) ).length ) !== Object.keys( r ).length ) return !1;
			for ( s = i; 0 != s--; )
				if ( !Object.prototype.hasOwnProperty.call( r, n[ s ] ) ) return !1;
			for ( s = i; 0 != s--; ) {
				var o = n[ s ];
				if ( !t( e[ o ], r[ o ] ) ) return !1
			}
			return !0
		}
		return e != e && r != r
	};
	const e = "__googleMapsScriptId";
	var r;
	! function ( t ) {
		t[ t.INITIALIZED = 0 ] = "INITIALIZED", t[ t.LOADING = 1 ] = "LOADING", t[ t.SUCCESS = 2 ] = "SUCCESS", t[ t.FAILURE = 3 ] = "FAILURE"
	}( r || ( r = {} ) );
	class i {
		constructor( {
			apiKey: r,
			channel: s,
			client: n,
			id: o = e,
			libraries: a = [],
			language: l,
			region: h,
			version: c,
			mapIds: u,
			nonce: d,
			retries: g = 3,
			url: p = "https://maps.googleapis.com/maps/api/js"
		} ) {
			if ( this.CALLBACK = "__googleMapsCallback", this.callbacks = [], this.done = !1, this.loading = !1, this.errors = [], this.version = c, this.apiKey = r, this.channel = s, this.client = n, this.id = o || e, this.libraries = a, this.language = l, this.region = h, this.mapIds = u, this.nonce = d, this.retries = g, this.url = p, i.instance ) {
				if ( !t( this.options, i.instance.options ) ) throw new Error( `Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(i.instance.options)}` );
				return i.instance
			}
			i.instance = this
		}
		get options() {
			return {
				version: this.version,
				apiKey: this.apiKey,
				channel: this.channel,
				client: this.client,
				id: this.id,
				libraries: this.libraries,
				language: this.language,
				region: this.region,
				mapIds: this.mapIds,
				nonce: this.nonce,
				url: this.url
			}
		}
		get status() {
			return this.errors.length ? r.FAILURE : this.done ? r.SUCCESS : this.loading ? r.LOADING : r.INITIALIZED
		}
		get failed() {
			return this.done && !this.loading && this.errors.length >= this.retries + 1
		}
		createUrl() {
			let t = this.url;
			return t += `?callback=${this.CALLBACK}`, this.apiKey && ( t += `&key=${this.apiKey}` ), this.channel && ( t += `&channel=${this.channel}` ), this.client && ( t += `&client=${this.client}` ), this.libraries.length > 0 && ( t += `&libraries=${this.libraries.join(",")}` ), this.language && ( t += `&language=${this.language}` ), this.region && ( t += `&region=${this.region}` ), this.version && ( t += `&v=${this.version}` ), this.mapIds && ( t += `&map_ids=${this.mapIds.join(",")}` ), t
		}
		deleteScript() {
			const t = document.getElementById( this.id );
			t && t.remove()
		}
		load() {
			return this.loadPromise()
		}
		loadPromise() {
			return new Promise( ( ( t, e ) => {
				this.loadCallback( ( r => {
					r ? e( r.error ) : t( window.google )
				} ) )
			} ) )
		}
		loadCallback( t ) {
			this.callbacks.push( t ), this.execute()
		}
		setScript() {
			if ( document.getElementById( this.id ) ) return void this.callback();
			const t = this.createUrl(),
				e = document.createElement( "script" );
			e.id = this.id, e.type = "text/javascript", e.src = t, e.onerror = this.loadErrorCallback.bind( this ), e.defer = !0, e.async = !0, this.nonce && ( e.nonce = this.nonce ), document.head.appendChild( e )
		}
		reset() {
			this.deleteScript(), this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = null
		}
		resetIfRetryingFailed() {
			this.failed && this.reset()
		}
		loadErrorCallback( t ) {
			if ( this.errors.push( t ), this.errors.length <= this.retries ) {
				const t = this.errors.length * Math.pow( 2, this.errors.length );
				console.log( `Failed to load Google Maps script, retrying in ${t} ms.` ), setTimeout( ( () => {
					this.deleteScript(), this.setScript()
				} ), t )
			} else this.onerrorEvent = t, this.callback()
		}
		setCallback() {
			window.__googleMapsCallback = this.callback.bind( this )
		}
		callback() {
			this.done = !0, this.loading = !1, this.callbacks.forEach( ( t => {
				t( this.onerrorEvent )
			} ) ), this.callbacks = []
		}
		execute() {
			if ( this.resetIfRetryingFailed(), this.done ) this.callback();
			else {
				if ( window.google && window.google.maps && window.google.maps.version ) return console.warn( "Google Maps already loaded outside @googlemaps/js-api-loader.This may result in undesirable behavior as options and script parameters may not match." ), void this.callback();
				this.loading || ( this.loading = !0, this.setCallback(), this.setScript() )
			}
		}
	}
	const s = [ {
		featureType: "landscape",
		stylers: [ {
			hue: "#00dd00"
		} ]
	}, {
		featureType: "road",
		stylers: [ {
			hue: "#dd0000"
		} ]
	}, {
		featureType: "water",
		stylers: [ {
			hue: "#000040"
		} ]
	}, {
		featureType: "poi.park",
		stylers: [ {
			visibility: "off"
		} ]
	}, {
		featureType: "road.arterial",
		stylers: [ {
			hue: "#ffff00"
		} ]
	}, {
		featureType: "road.local",
		stylers: [ {
			visibility: "off"
		} ]
	} ];

	function n( t ) {
		return function ( t ) {
			if ( Array.isArray( t ) ) return o( t )
		}( t ) || function ( t ) {
			if ( "undefined" != typeof Symbol && null != t[ Symbol.iterator ] || null != t[ "@@iterator" ] ) return Array.from( t )
		}( t ) || function ( t, e ) {
			if ( !t ) return;
			if ( "string" == typeof t ) return o( t, e );
			var r = Object.prototype.toString.call( t ).slice( 8, -1 );
			"Object" === r && t.constructor && ( r = t.constructor.name );
			if ( "Map" === r || "Set" === r ) return Array.from( t );
			if ( "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test( r ) ) return o( t, e )
		}( t ) || function () {
			throw new TypeError( "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method." )
		}()
	}

	function o( t, e ) {
		( null == e || e > t.length ) && ( e = t.length );
		for ( var r = 0, i = new Array( e ); r < e; r++ ) i[ r ] = t[ r ];
		return i
	}
	const a = function () {
		var t = new i( {
				apiKey: "AIzaSyA_MQQgSumzx3yMIfz4n5Trl_FTSbiWOQo",
				version: "weekly"
			} ),
			e = document.querySelector( "#map" ),
			r = {
				lat: 40.74881584652125,
				lng: -73.98561648634562
			};
		t.load().then( ( function () {
			var t = new google.maps.Map( e, {
				center: r,
				zoom: 16,
				styles: n( s ),
				disableDefaultUI: !0
			} );
			new google.maps.Marker( {
				position: r,
				map: t,
				icon: "./svg/marker.svg"
			} )
		} ) )
	};
	document.addEventListener( "DOMContentLoaded", ( function () {
		a()
	} ) )
} )();